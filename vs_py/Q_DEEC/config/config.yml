# config/config.yml 基础配置（前两周聚焦）

# 网络拓扑参数
network:
  node_count: 100           # 初始节点数量
  area_size: [500, 500]     # 网络区域尺寸(米)
  base_position: [250,250]  # 基站坐标
  seed: 42                  # 随机种子
  "communication_range": 130 # 从配置读取或默认
  direct_bs_comm_threshold: 75 # 节点可直连BS的距离阈值 (m)
  poisson_disk_min_dist_factor: 0.65 # 用于计算最小距离的启发式因子 C (r = sqrt((area * C) / N))
                                     # 如果注释掉或未提供，env.py 中会使用默认值
  poisson_disk_k_samples: 30         # Bridson算法中每个激活点的候选采样次数
                                     # 如果注释掉或未提供，env.py 中会使用默认值
  min_cluster_head_distance: 80    # 新增：最小簇头间距
  edge_margin: 50                  # 新增：边缘边距

# 能量模型参数
energy:
  initial: 1             # 初始能量(J)
  rx_cost: 5e-9           # 接收能耗(nJ/bit)
  tx_amp_fs: 10e-12      # 自由空间模型的放大器能量 (epsilon_fs)
  tx_amp_mp: 0.0013e-12   # 多径衰落模型的放大器能量 (epsilon_mp)
  data_rate: 250000       # 数据传输速率(bps)
  threshold_d0: 87.7        # 距离阈值(自由空间/多径切换)
  idle_listening_per_round: 0.000001 # 假设的空闲监听消耗 (J/round)
  sensing_per_round: 0.0000005       # 假设的感知消耗 (J/round)
  min_energy_direct_bs: 0.1 # 节点直连BS所需的最小能量比例 (相对于初始能量)
  fusion_efficiency_factor: 0.1  # 数据融合效率因子。0表示完美融合（大小不变），1表示无压缩（大小=N*基础大小）。
  
# 仿真控制
simulation:
  total_rounds: 100      # 总仿真轮数
  packet_size: 4000         # 数据包大小(bit)
  warmup_rounds: 50         # 预热阶段轮数
  max_packet_hops: 10       #最大跳数
  use_q_learning: false
  use_fuzzy_logic: false

# 可视化设置
visualization:
  update_interval: 50       # 刷新间隔(轮)
  colors:
    cluster_head: '#FF4500' # 簇头节点颜色
    normal_node: '#1E90FF'  # 普通节点颜色
    base_station: '#32CD32' # 基站颜色

fuzzy:
  fuzzy_opt:true
  default_defuzzy_method:'centroid'
  default_AND:'min'
  default_OR:'max'
  fuzzy_logger_opt:'all'

  # ... 其他配置 ...

# DEEC 协议参数
deec:
  p_opt: 0.1                # 期望的簇头百分比 (optimal percentage of CHs)
  p_opt_min: 0.03 # [新增] 能量耗尽时，p_opt的下限
  p_opt_max: 0.15 # [新增] 能量充足时，p_opt的上限
  max_comm_range_increase_factor: 1.5 # 普通节点通信范围最大增加倍数
  min_ch_to_node_ratio_target: 0.05  # 目标最小CH/节点比例，低于此可能增加p_opt
  location_factor_enabled: true       # 是否启用位置因子
  optimal_bs_dist_min: 100           # CH距离BS的最佳范围 - 最小值 (m)
  optimal_bs_dist_max: 180          # CH距离BS的最佳范围 - 最大值 (m)
  penalty_factor_too_close: 0.6     # CH距离BS过近时的概率惩罚因子 (0-1)
  penalty_factor_too_far: 0.5       # CH距离BS过远时的概率惩罚因子 (0-1)
  min_inter_ch_distance_factor: 0.5
  location_factor_enabled: true     # 启用位置因子
  edge_penalty_factor: 0.3          # 边缘节点惩罚因子
  epoch_length: 20
  ch_communication_range_base: 100 # CH的基础通信范围 (可以与普通节点不同，或相同)
  ch_communication_range_max: 200  # CH允许的最大通信范围 (m)
  ch_communication_range_steps: 4
  ch_communication_range_increment: 25
  msl: 
      min_ch_count_absolute: 3
      min_ch_ratio_to_alive: 0.05
  ch_finalize_rules:
    min_count_factor: 0.8  # 最小CH数量 = 理想值 * 0.8
    max_count_factor: 1.2  # 最大CH数量 = 理想值 * 1.2
    too_close_factor: 0.8  # CH间最小距离 = 通信范围 * 0.8
    coverage_weight: 0.5
    energy_weight: 0.3
    centrality_weight: 0.2
    suppression_factor: 0.5 # [新增] 拓扑抑制衰减因子。0.5表示邻居的候选度减半
  # E_avg_current: 1.0      # 当前网络平均能量 (这个通常是动态计算的，但可以有个初始估计或不用配置)
  # round_length_epoch: 100 # 一个epoch包含的轮数 (DEEC中簇头通常在一个epoch内不变)
                           # 对于初步集成，我们可以简化为每轮都可能重新选举

# A-IoT特性增强参数
aiot_enhancements:
  # 创新点1: 节点可用/不可用状态
  energy_harvesting_enabled: true # 是否启用能量收集模拟
  min_operational_energy: 0.01    # (J) 维持基本运作的最低能量，低于此可能不可用
  wakeup_energy_threshold: 0.05   # (J) 从不可用状态唤醒所需的能量阈值
  energy_harvesting_rate_avg: 0.0001 # (J/轮) 平均能量收集速率 (可以更复杂，如基于时间变化)
                                      # 如果 harvesting_rate 在节点属性中设置，这里可以不配置

  # 创新点2: 普通节点机会传输
  normal_node_E_active: 0.15      # (J) 普通节点激活传输决策的能量阈值
  normal_node_E_safe: 0.1         # (J) 普通节点发送后希望维持的最低安全能量阈值

# ... 其他配置 ...

# 在 visualization: colors: 中添加
visualization:
  # ...
  colors:
    cluster_head: '#FF4500' 
    normal_node: '#1E90FF'  
    base_station: '#32CD32'
    dead_node: '#A9A9A9' # 如果需要区分死亡节点颜色
    direct_bs_node: '#FFD700' # 新增：直连BS节点的颜色 (例如金色)
    ch_route_line: '#8A2BE2' # 紫罗兰色，用于CH间路由
    ch_to_direct_node_route_line: '#FFA500' # 橙色，CH到直连BS节点的路由颜色

q_learning:
  alpha_compete_ch: 0.1
  gamma_compete_ch: 0.9
  epsilon_compete_ch_initial: 0.6 # 初始探索率高一些
  epsilon_compete_ch_decay: 0.995
  epsilon_compete_ch_min: 0.01
  ch_switching_hysteresis: 5.0 # 新增：普通节点切换CH的Q值滞后阈值 (奖励单位)
  alpha_ch_hop: 0.1
  gamma_ch_hop: 0.9
  geography_reward_factor: 0.05
  ch_buffer_size: 20
  q_value_factor: 1.0              # 历史Q值的权重
  geography_reward_factor: 0.05    # 地理进展奖励的权重
  shortest_path_reward_factor: 10.0 # 全局最短路径奖励的权重
  load_penalty_factor: 20.0 # 负载惩罚的系数，值越大，CH越厌恶拥挤的下一跳
  dynamic_path_reward_factor: 50.0 # 新的路径奖励因子
  ch_management: # 或者放在 deec: 下
    enable_capacity_limit: true       # 是否启用CH容量限制
    max_members_factor: 1.5           # CH最大成员数 = (网络平均每CH成员数) * max_members_factor
    overload_tolerance: 2
    max_energy_budget_per_round_for_tx: 0.1 # CH每轮最多使用其当前能量的10%用于发送
    max_packets_per_round_absolute: 5      # CH每轮最多发送的绝对数据包数量上限
  # 可以为普通节点选择CH的Q学习也添加类似参数

rewards:
  ch_competition: # 竞争成为CH的基础奖励/惩罚值
    member_join_unit: 2.0      # 每加入一个成员的基础奖励
    self_energy_unit: 5.0      # 自身高能量成为CH的基础奖励因子
    cost_of_being_ch: 5.0      # 成为CH的固定成本/惩罚
    rotation_unit: 0.1         # 每轮未当CH的轮换奖励因子
    missed_opportunity: 10.0   # 错失良机（本应成为CH但未成为）的惩罚
    self_uncovered: 8.0        # 自己未被覆盖的惩罚
    conserve_energy_low_self: 3.0 # 自身能量低时选择不当CH的奖励
    passivity_ch_enough: 2.0   # 周围CH足够时选择不当CH的奖励
    distance_impact_unit: 5.0 # w_dis 影响的基础奖励/惩罚幅度
    select_ch: # 普通节点选择CH的奖励组件基础值
    transmission_success: 50.0
    transmission_fail: -50.0
    energy_component_scale: 20.0  # 用于缩放CH能量项的贡献
    path_component_scale: 30.0    # 用于缩放路径成本/成功率项的贡献
    load_component_scale: 20.0    # 用于缩放CH负载项的贡献
    dist_bs_component_scale: 10.0 # 用于缩放CH到BS距离项的贡献
    # ideal_members_per_ch_ref: 5 # 理想的每个CH服务的成员数参考值 (用于负载奖励) 
                                  # 这个也可以在代码中动态计算
  ch_select_next_hop:
    reach_bs_bonus: 100
    transmission_fail_penalty: -100
    data_progress_unit: 1.0
    energy_cost_penalty_unit: 2000
    next_hop_low_energy_penalty_unit: -20
    next_hop_high_load_penalty_unit: -15
    reach_bs_via_direct_node_bonus: 10 # 新增：通过直连节点到达BS的奖励

  select_ch:
    rejection_penalty: -30.0        # 当选择的CH因容量满而拒绝加入时的惩罚

discretization_params:
  energy: # 归一化能量
    num_bins: 5 # 如果使用等宽分箱
    custom_boundaries: [0.25, 0.55, 0.85, 0.95]
    # 或者使用自定义边界 (如果选择这种方式，则 num_bins 可以省略或不使用)
    # custom_boundaries: [0.2, 0.4, 0.6, 0.8] # 定义了5个区间: <0.2, 0.2-0.4, ..., >=0.8

  time_since_last_ch:
    boundaries: [10,30,60] # 定义3个状态: <=20, >20 & <=60, >60

  neighbor_count:
    # 使用相对参考值的方式，或者也可以定义绝对边界
    # 如果用相对参考值，max_neighbors_ref_factor 可能需要从其他地方获取或在此定义
    # 这里我们先用绝对边界示例，如果需要相对的，则需要在代码中处理
    num_bins: 3
    # 或者自定义边界，例如：
    # boundaries: [5, 15] # <=5, >5 & <=15, >15

  ch_count_nearby:
    boundaries: [0, 2, 4] # =0, =1 or =2, >2

  distance_to_bs_normalized:
    boundaries: [0.22, 0.35, 0.48] 

routing:
  dynamic_cost_weights:
    distance: 0.2  # 距离成本的权重
    energy: 0.4    # 能量成本的权重
    load: 0.4      # 负载成本的权重
    direct_bs_factor: 1.5 # [新增] 直连BS的成本惩罚因子
    gateway_hop_discount: 0.7 # [新增] 去往网关CH的路由成本折扣因子。小于1表示鼓励。
    relay_hop_discount: 0.85  # [新增] 去往常规中继CH的成本折扣

# in config.yml
pre_training:
  enabled: false
  rounds_compete_ch: 50000
  rounds_select_ch: 20000